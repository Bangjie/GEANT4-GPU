#  @configure_input@
exec_prefix=@PWD@

EXAMPLEDIR=@PWD@/examples
INCLUDEDIR=@PWD@/include
LIBDIR=@PWD@/lib
SRCDIR=@PWD@/src
SOURCE=${SRCDIR}/topc.c ${SRCDIR}/options.c ${SRCDIR}/procgroup.c

CC=@CC@
CFLAGS=@CFLAGS@
TOPCC=./topcc

@SET_MAKE@

BINARIES=parfactor parfactor-raw gauss-elim gauss-elim-fine-grain \
	par8queens-raw par8queens-abort \
	parquicksort parquicksort-raw

parfactor: parfactor.o ${LIBDIR}/libtopc-mpi.a ${LIBDIR}/libmpinu.a
	${TOPCC} ${CFLAGS} parfactor.o
	@ echo FACTORING 123456789
	./a.out 123456789
parfactor-seq: parfactor.o ${LIBDIR}/libtopc-seq.a
	${TOPCC} --seq ${CFLAGS} parfactor.o
	@ echo FACTORING 123456789
	./a.out 123456789
parfactor-pthread: parfactor.o ${LIBDIR}/libtopc-pthread.a
	${TOPCC} --pthread ${CFLAGS} parfactor.o
	@ echo FACTORING 123456789
	./a.out 123456789
parfactor-pthread-long: parfactor.o ${LIBDIR}/libtopc-pthread.a
	${TOPCC} --pthread ${CFLAGS} parfactor.o
	@ echo FACTORING 123456761 \(prime\)
	./a.out 123456761
parfactor.o: ${EXAMPLEDIR}/parfactor.c ${INCLUDEDIR}/topc.h
	${TOPCC} -c ${CFLAGS} ${EXAMPLEDIR}/parfactor.c

# TEST raw interface to TOP-C with different communication layers
parfactor-raw: parfactor-raw.o ${LIBDIR}/libtopc-mpi.a ${LIBDIR}/libmpinu.a
	${TOPCC} ${CFLAGS} parfactor-raw.o
	@ echo FACTORING 123456789
	./a.out 123456789
parfactor-raw-seq: parfactor-raw.o ${LIBDIR}/libtopc-seq.a
	${TOPCC} --seq ${CFLAGS} parfactor-raw.o
	@ echo FACTORING 123456789
	./a.out 123456789
parfactor-raw-pthread: parfactor-raw.o ${LIBDIR}/libtopc-pthread.a
	${TOPCC} --pthread ${CFLAGS} parfactor-raw.o
	@ echo FACTORING 123456789
	./a.out 123456789
parfactor-raw.o: ${EXAMPLEDIR}/parfactor-raw.c ${INCLUDEDIR}/topc.h
	${TOPCC} -c ${CFLAGS} ${EXAMPLEDIR}/parfactor-raw.c

gauss-elim: gauss-elim.o ${LIBDIR}/libtopc-mpi.a ${LIBDIR}/libmpinu.a
	${TOPCC} ${CFLAGS} gauss-elim.o
	@ echo DOING GAUSSIAN ELIMINATION OF MATRIX IN PROGRAM
	./a.out
gauss-elim-seq: gauss-elim.o ${LIBDIR}/libtopc-seq.a
	${TOPCC} --seq ${CFLAGS} gauss-elim.o
	@ echo DOING GAUSSIAN ELIMINATION OF MATRIX IN PROGRAM
	@ echo NOTICE THERE ARE FEWER TASK INPUTS DUE TO SEQUENTIALIZED STEPS
	./a.out
gauss-elim-pthread: gauss-elim.o ${LIBDIR}/libtopc-pthread.a
	${TOPCC} --pthread ${CFLAGS} gauss-elim.o
	@ echo FACTORING 123456789
	./a.out
gauss-elim.o: ${EXAMPLEDIR}/gauss-elim.c ${INCLUDEDIR}/topc.h
	${TOPCC} -c ${CFLAGS} ${EXAMPLEDIR}/gauss-elim.c

parquicksort: parquicksort.o ${LIBDIR}/libtopc-mpi.a ${LIBDIR}/libmpinu.a
	${TOPCC} ${CFLAGS} parquicksort.o
	@ echo DOING parallel quicksort
	./a.out
parquicksort-seq: parquicksort.o ${LIBDIR}/libtopc-seq.a
	${TOPCC} --seq ${CFLAGS} parquicksort.o
	@ echo DOING parallel quicksort
	./a.out
parquicksort-pthread: parquicksort.o ${LIBDIR}/libtopc-pthread.a
	${TOPCC} --pthread ${CFLAGS} parquicksort.o
	@ echo DOING parallel quicksort
	./a.out
parquicksort.o: ${EXAMPLEDIR}/parquicksort.c ${INCLUDEDIR}/topc.h
	${TOPCC} -c ${CFLAGS} ${EXAMPLEDIR}/parquicksort.c

par8queens-raw: par8queens-raw.o ${LIBDIR}/libtopc-mpi.a ${LIBDIR}/libmpinu.a
	${TOPCC} ${CFLAGS} par8queens-raw.o
	@ echo DOING parallel 8queens-raw
	./a.out
par8queens-raw-seq: par8queens-raw.o ${LIBDIR}/libtopc-seq.a
	${TOPCC} --seq ${CFLAGS} par8queens-raw.o
	@ echo DOING parallel 8queens-raw
	./a.out
par8queens-raw-pthread: par8queens-raw.o ${LIBDIR}/libtopc-pthread.a
	${TOPCC} --pthread ${CFLAGS} par8queens-raw.o
	@ echo DOING parallel 8queens-raw
	./a.out
par8queens-raw.o: ${EXAMPLEDIR}/par8queens-raw.c ${INCLUDEDIR}/topc.h
	${TOPCC} -c ${CFLAGS} ${EXAMPLEDIR}/par8queens-raw.c

parsimple: parsimple.o ${LIBDIR}/libtopc-mpi.a ${LIBDIR}/libmpinu.a
	${TOPCC} ${CFLAGS} parsimple.o
	@ echo DOING parallel simple
	./a.out
parsimple-seq: parsimple.o ${LIBDIR}/libtopc-seq.a
	${TOPCC} --seq ${CFLAGS} parsimple.o
	@ echo DOING parallel simple
	./a.out
parsimple-pthread: parsimple.o ${LIBDIR}/libtopc-pthread.a
	${TOPCC} --pthread ${CFLAGS} parsimple.o
	@ echo DOING parallel simple
	./a.out
parsimple.o: ${EXAMPLEDIR}/parsimple.c ${INCLUDEDIR}/topc.h
	${TOPCC} -c ${CFLAGS} ${EXAMPLEDIR}/parsimple.c

all: ${INCLUDEDIR}/topc.h ${TOPCC}
	for file in ${BINARIES}; do \
	    ${TOPCC} -c ${CFLAGS} ${EXAMPLEDIR}/$$file.c ; \
	done

${INCLUDEDIR}/topc.h:  ${SRCDIR}/topc.h
	( cd ${SRCDIR}; ${MAKE} ${INCLUDEDIR}/topc.h )
${LIBDIR}/libtopc-mpi.a:  ${SOURCE} ${SRCDIR}/comm-mpi.c
	( cd ${SRCDIR}; ${MAKE} ${LIBDIR}/libtopc-mpi.a )
${LIBDIR}/libtopc-seq.a:  ${SOURCE} ${SRCDIR}/comm-seq.c
	( cd ${SRCDIR}; ${MAKE} ${LIBDIR}/libtopc-seq.a )
${LIBDIR}/libtopc-pthread.a:  ${SOURCE} ${SRCDIR}/comm-pthread.c
	( cd ${SRCDIR}; ${MAKE} ${LIBDIR}/libtopc-pthread.a )
${LIBDIR}/libmpinu.a:  ${SRCDIR}/mpinu/libmpi.a
	cp ${SRCDIR}/mpinu/libmpi.a ${LIBDIR}/libmpinu.a
${SRCDIR}/mpinu/libmpi.a:
	( cd ${SRCDIR}; ${MAKE} ${LIBDIR}/libmpinu.a )

checkall: ${LIBDIR}/libtopc.a ${LIBDIR}/libtopc-seq.a \
	${LIBDIR}/libtopc-pthread.a ${LIBDIR}/libmpinu.a
	echo "*** WARNING:  Some of these tests may take a little while"
	${MAKE} check TEST_FILE=parfactor
	${MAKE} check TEST_FILE=parfactor-raw
	${MAKE} check TEST_FILE=gauss-elim
	${MAKE} check TEST_FILE=gauss-elim-redo
	${MAKE} check TEST_FILE=gauss-elim-fine-grain
	${MAKE} check TEST_FILE=par8queens-raw
	${MAKE} check TEST_FILE=par8queens-abort
	${MAKE} check TEST_FILE=parquicksort
	${MAKE} check TEST_FILE=parquicksort-raw
	${MAKE} check TEST_FILE=parsimple

# Should add code to check that correct answer was returned in ../tests .
# Could simply compare sequential output with others, to see if same
#  autom4te (part of autoconf package) provides support for that.
check:
	@ if test "${TEST_FILE}" = ""; then \
	  echo ""; \
	  echo '***' TOP-C: bin/Makefile: invalid call to "'make check'"; \
	  echo "Syntax:  make check TEST_FILE=EXAMPLE_FILE"; \
	  echo "  where examples/EXAMPLE_FILE.c is a file in TOP-C distrib"; \
	  exit 1; \
	fi;
	${MAKE} checkit TEST_FILE='${TEST_FILE}'
checkit: ${EXAMPLEDIR}/${TEST_FILE}.c ${INCLUDEDIR}/topc.h
	${TOPCC} -c ${CFLAGS} ${EXAMPLEDIR}/${TEST_FILE}.c
	@ echo ""
	@ echo DOING --seq version of ${TEST_FILE} ${TEST_ARGS} && \
	${TOPCC} --seq ${CFLAGS} ${TEST_FILE}.o		        && \
	./a.out ${TEST_ARGS} && echo TESTED: ${TEST_FILE}-seq ${TEST_ARGS} \
	|| ( echo ""; echo ======TEST ${TEST_FILE}-seq FAILED======; echo "" )
	@if test "x@HAVE_PTHREAD@" = "xyes"; then \
	  echo "" \
	  echo DOING --pthread version of ${TEST_FILE} ${TEST_ARGS} && \
	  ${TOPCC} --pthread ${CFLAGS} ${TEST_FILE}.o		    && \
	 ./a.out ${TEST_ARGS} && echo TESTED: ${TEST_FILE}-pthread ${TEST_ARGS}\
	 || ( echo ""; echo ======TEST ${TEST_FILE}-pthread FAILED======; \
	      echo "" ) \
	fi
	@ echo ""
	@ echo DOING --mpi version of ${TEST_FILE} ${TEST_ARGS} && \
	${TOPCC} --mpi ${CFLAGS} ${TEST_FILE}.o		        && \
	./a.out ${TEST_ARGS} && echo TESTED: ${TEST_FILE}-mpi ${TEST_ARGS} \
	|| ( echo ""; echo ======TEST ${TEST_FILE}-mpi FAILED======; echo "" )

src:
	( cd ${SRCDIR}; ${MAKE} )

clean:
	rm -f *.o a.out core .gdbinit

distclean: clean
	rm -f *~ slave?.out
